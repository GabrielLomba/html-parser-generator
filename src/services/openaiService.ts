import OpenAI from 'openai';

export class OpenAIService {
    private client: OpenAI;

    constructor(apiKey: string) {
        this.client = new OpenAI({
            apiKey: apiKey
        });
    }

    async generateParser(url: string, htmlText: string): Promise<string> {
        const prompt = this.createParserPrompt(url, htmlText);

        try {
            const completion = await this.client.chat.completions.create({
                model: "gpt-4",
                messages: [
                    {
                        role: "system",
                        content: "You are an expert at creating HTML parsers. Generate clean, efficient JavaScript/TypeScript code that extracts relevant content from HTML."
                    },
                    {
                        role: "user",
                        content: prompt
                    }
                ],
                temperature: 0.1,
                max_tokens: 2000
            });

            const parserCode = completion.choices[0]?.message?.content;
            if (!parserCode) {
                throw new Error('No parser code generated by OpenAI');
            }

            return this.sanitizeParserCode(parserCode);
        } catch (error) {
            console.error('Error generating parser with OpenAI:', error);
            throw new Error(`Failed to generate parser: ${error instanceof Error ? error.message : 'Unknown error'}`);
        }
    }

    private createParserPrompt(url: string, htmlText: string): string {
        return `
Create a JavaScript/TypeScript function that parses HTML content from the following URL pattern and extracts relevant text content.

URL: ${url}

Sample HTML content (first 2000 characters):
${htmlText.substring(0, 2000)}

Requirements:
1. The function should be named 'parseHtml' and accept an HTML string as input
2. Extract only relevant text content, ignoring navigation, ads, scripts, styles, and other non-content elements
3. Return a clean object with extracted data
4. Use modern JavaScript/TypeScript syntax
5. Include proper error handling
6. The function should be self-contained and not require external dependencies beyond basic DOM parsing

Return only the function code, no explanations or markdown formatting.
        `.trim();
    }

    private sanitizeParserCode(code: string): string {
        // Remove markdown code blocks if present
        let sanitized = code.replace(/```[\s\S]*?```/g, (match) => {
            return match.replace(/```(?:javascript|typescript|js|ts)?\n?/, '').replace(/```$/, '');
        });

        // Remove any remaining markdown formatting
        sanitized = sanitized.replace(/^```.*$/gm, '').trim();

        // Ensure the function is properly formatted
        if (!sanitized.includes('function') && !sanitized.includes('=>')) {
            sanitized = `function parseHtml(html) {\n    ${sanitized}\n}`;
        }

        return sanitized;
    }
}
